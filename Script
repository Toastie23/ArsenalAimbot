-- Load the Kavo UI Library
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()

-- Create the main window
local Window = Library.CreateLib("Toast Hub FF2", "GrapeTheme")

-- Create "Movement" tab
local MovementTab = Window:NewTab("Movement")

-- Add a section for movement controls
local MovementSection = MovementTab:NewSection("Movement Controls")

-- Variables for flying
local isFlying = false
local flySpeed = 50
local bodyVelocity
local bodyGyro

-- Function to start flying
local function startFly()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

    if character and humanoidRootPart then
        -- Create and configure BodyVelocity and BodyGyro
        bodyVelocity = Instance.new("BodyVelocity")
        bodyGyro = Instance.new("BodyGyro")
        bodyVelocity.Parent = humanoidRootPart
        bodyGyro.Parent = humanoidRootPart
        bodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
        bodyGyro.MaxTorque = Vector3.new(4000, 4000, 4000)
        bodyGyro.CFrame = humanoidRootPart.CFrame
        bodyGyro.P = 10000
        bodyGyro.D = 500

        -- Update velocity and orientation every frame
        game:GetService("RunService").RenderStepped:Connect(function()
            if isFlying then
                local userInputService = game:GetService("UserInputService")
                local moveDirection = Vector3.new(0, 0, 0)

                -- Calculate movement direction based on user input
                if userInputService:IsKeyDown(Enum.KeyCode.W) then
                    moveDirection = moveDirection + humanoidRootPart.CFrame.LookVector
                end
                if userInputService:IsKeyDown(Enum.KeyCode.S) then
                    moveDirection = moveDirection - humanoidRootPart.CFrame.LookVector
                end
                if userInputService:IsKeyDown(Enum.KeyCode.A) then
                    moveDirection = moveDirection - humanoidRootPart.CFrame.RightVector
                end
                if userInputService:IsKeyDown(Enum.KeyCode.D) then
                    moveDirection = moveDirection + humanoidRootPart.CFrame.RightVector
                end
                if userInputService:IsKeyDown(Enum.KeyCode.Space) then
                    moveDirection = moveDirection + Vector3.new(0, 1, 0)
                end
                if userInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
                    moveDirection = moveDirection - Vector3.new(0, 1, 0)
                end

                -- Normalize the movement direction to ensure consistent speed
                if moveDirection.Magnitude > 0 then
                    moveDirection = moveDirection.Unit
                end

                -- Apply movement velocity
                bodyVelocity.Velocity = moveDirection * flySpeed
                bodyGyro.CFrame = humanoidRootPart.CFrame
            end
        end)
    end
end

-- Function to stop flying
local function stopFly()
    if bodyVelocity then
        bodyVelocity:Destroy()
    end
    if bodyGyro then
        bodyGyro:Destroy()
    end
end

-- Function to toggle flying
local function toggleFly(state)
    if state then
        isFlying = true
        startFly()
    else
        isFlying = false
        stopFly()
    end
end

-- Add a toggle for flying
MovementSection:NewToggle("Fly", "Toggle Flying", function(state)
    toggleFly(state)
end)

-- Add a slider for fly speed
MovementSection:NewSlider("Fly Speed", "Adjust fly speed", 100, 50, function(value)
    flySpeed = value
    if isFlying and bodyVelocity then
        bodyVelocity.Velocity = bodyVelocity.Velocity.Unit * flySpeed
    end
end)

-- Add a slider for jump boost
MovementSection:NewSlider("Jump Boost", "Adjust jump power", 200, 50, function(value)
    local player = game.Players.LocalPlayer
    if player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid.JumpPower = value
    end
end)

-- Add a slider for speed (optional)
MovementSection:NewSlider("Speed", "Adjust movement speed", 100, 16, function(value)
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
end)

-- Create "Aiming" tab
local AimingTab = Window:NewTab("Aiming")

-- Add a section for aiming features
local AimingSection = AimingTab:NewSection("Aiming Features")

-- Variables for beams, boxes, and mouse targeting
local isBeaming = false
local isBoxing = false
local isMouseTargeting = false
local beams = {}
local boxes = {}

-- Function to update beams and boxes
local function updateBeamsAndBoxes()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

    if character and humanoidRootPart then
        -- Clear existing beams and boxes
        for _, item in pairs(beams) do
            item:Destroy()
        end
        beams = {}
        for _, box in pairs(boxes) do
            box:Destroy()
        end
        boxes = {}

        -- Create beams and purple boxes to every player
        for _, otherPlayer in pairs(game.Players:GetPlayers()) do
            if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local otherHumanoidRootPart = otherPlayer.Character.HumanoidRootPart

                if isBeaming then
                    -- Create a Beam instance
                    local beam = Instance.new("Beam")
                    beam.Parent = workspace

                    -- Create Attachments for the Beam
                    local attachment0 = Instance.new("Attachment")
                    local attachment1 = Instance.new("Attachment")
                    attachment0.Parent = humanoidRootPart
                    attachment1.Parent = otherHumanoidRootPart

                    -- Configure the Beam
                    beam.Attachment0 = attachment0
                    beam.Attachment1 = attachment1
                    beam.Color = ColorSequence.new(Color3.fromRGB(255, 0, 0))
                    beam.Width0 = 0.2
                    beam.Width1 = 0.2
                    beam.Segments = 10
                    table.insert(beams, beam)
                end

                if isBoxing then
                    -- Create a purple box at the end of the beam
                    local box = Instance.new("Part")
                    box.Size = Vector3.new(5, 5, 1)
                    box.Position = otherHumanoidRootPart.Position
                    box.Anchored = true
                    box.CanCollide = false
                    box.BrickColor = BrickColor.new("Royal purple")
                    box.Material = Enum.Material.SmoothPlastic
                    box.Transparency = 0.5
                    box.Parent = workspace
                    -- Set the box to follow the player
                    game:GetService("RunService").RenderStepped:Connect(function()
                        if isBoxing then
                            box.Position = otherHumanoidRootPart.Position
                        end
                    end)
                    table.insert(boxes, box)
                end
            end
        end
    end
end

-- Function to toggle beams
local function toggleBeams(state)
    isBeaming = state
    updateBeamsAndBoxes()
end

-- Function to toggle boxes
local function toggleBoxes(state)
    isBoxing = state
    updateBeamsAndBoxes()
end

-- Function to handle mouse targeting
local function setupMouseTargeting()
    local player = game.Players.LocalPlayer
    local mouse = player:GetMouse()
    local screenGui = Instance.new("ScreenGui", player.PlayerGui)
    local indicator = Instance.new("Frame")
    indicator.Size = UDim2.new(0, 10, 0, 10)
    indicator.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    indicator.Visible = false
    indicator.Parent = screenGui

    local function updateIndicator()
        local closestPlayer = nil
        local shortestDistance = math.huge

        -- Find the closest player to the mouse
        for _, otherPlayer in pairs(game.Players:GetPlayers()) do
            if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local otherHumanoidRootPart = otherPlayer.Character.HumanoidRootPart
                local screenPoint = workspace.CurrentCamera:WorldToScreenPoint(otherHumanoidRootPart.Position)
                local distance = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(screenPoint.X, screenPoint.Y)).magnitude

                if distance < shortestDistance then
                    shortestDistance = distance
                    closestPlayer = otherPlayer
                end
            end
        end

        -- Update indicator position if a closest player is found
        if closestPlayer then
            local closestHead = closestPlayer.Character:FindFirstChild("Head")
            if closestHead then
                local headScreenPoint = workspace.CurrentCamera:WorldToScreenPoint(closestHead.Position)
                indicator.Position = UDim2.new(0, headScreenPoint.X - 5, 0, headScreenPoint.Y - 5)
                indicator.Visible = true
            end
        else
            indicator.Visible = false
        end
    end

    -- Update the indicator every frame if mouse targeting is enabled
    game:GetService("RunService").RenderStepped:Connect(function()
        if isMouseTargeting then
            updateIndicator()
        end
    end)

    -- Handle right mouse button click
    mouse.Button2Down:Connect(function()
        if isMouseTargeting then
            updateIndicator()
        end
    end)
end

-- Initialize mouse targeting setup
setupMouseTargeting()

-- Add a toggle for beams
AimingSection:NewToggle("Beams", "Toggle Beams to All Players", function(state)
    toggleBeams(state)
end)

-- Add a toggle for boxes around players
AimingSection:NewToggle("Boxes", "Toggle Boxes Around Players", function(state)
    toggleBoxes(state)
end)

